sudo apt install gdebi
install.packages("quantmod")
install.packages(c("questionr", "foreign", "readxl", "tidyverse", "ggplot2", "ggrepel", "RColorBrewer", "janitor", "rmarkdown", "knitr", "printr", "broom", "kableExtra", "bookdown", "lmtest", "nnet", "glm2", "ordinal", "FactoMineR", "GDAtools", "cluster", "explor", "factoextra", "TraMineR", "survival", "forecast", "R.temis", "quanteda", "topicmodels", "wordcloud", "network", "sna", "igraph", "tidygraph", "ggraph", "ggmap"))
txtplot(cars[,1], cars[,2], xlab = 'speed', ylab = 'distance')
install.packages("txtplot")
txtplot(cars[,1], cars[,2], xlab = 'speed', ylab = 'distance')
install.packages("car")
install.packages(c("curl", "rio", "car"))
install.packages("txtplot")
txtplot(cars[,1], cars[,2], xlab = 'speed', ylab = 'distance')
library(txtplot)
txtplot(cars[,1], cars[,2], xlab = 'speed', ylab = 'distance')
?distribution
dnorm(-10:10, 0, 1)
x <- seq(-10, 10, 0.01)
y <- dnorm(x)
plot (x,y)
?color
hist(rnorm(1000,0,1),breaks=50)
seed(1,2,3,4,5)
seed(12345)
?seed
??seed
ls
spam7<- read.table("spam7.txt")
spam7<-read.table("spam7.txt")
spam7 <- read.table("~/Documents/MS_Big_Data_TP_et_projets/Data Mining/TP4-Tree/spam7.txt", quote="\"", comment.char="")
View(spam7)
summary(spam7)
spam.sample <- spam7[sample(seq(1,4601),500, replace=FALSE), ]
par(mfrow=c(2,3))
boxplot(split(spam.sample$crl.tot,spam.sample$yesno), main="crl.tot")
boxplot(split(spam.sample$dollar,spam.sample$yesno), main="dollar")
> boxplot(split(spam.sample$bang,spam.sample$yesno), main="bang")
> boxplot(split(spam.sample$money,spam.sample$yesno), main="money")
> boxplot(split(spam.sample$n000,spam.sample$yesno), main="n000")
> boxplot(split(spam.sample$make,spam.sample$yesno), main="make")
boxplot(split(spam.sample$bang,spam.sample$yesno), main="bang")
boxplot(split(spam.sample$money,spam.sample$yesno), main="money")
boxplot(split(spam.sample$n000,spam.sample$yesno), main="n000")
boxplot(split(spam.sample$make,spam.sample$yesno), main="make")
spam6<-spam7[-7]
View(spam6)
reskmeans<-kmeans(spam6,2)
reskmeans
library(cluster)
respam<-pam(spam6,2)
plot(reshc1)
Normaliser crtl.tot permettra de mieux visualiser : quand on regarde plusieurs var, il faut normaliser !
--------------------------------------
spam6N<-scale(spam6)
> boxplot(split(spam.sample$n000,spam.sample$yesno), main="n000")
Normaliser crtl.tot permettra de mieux visualiser : quand on regarde plusieurs var, il faut normaliser !
--------------------------------------
spam6N<-scale(spam6)
library(rpart)
Rspam <- rpart(spam6,2)
Rspam <- rpart(spam7,2)
Rspam <- rpart(spam7,2)
S<-spam7
sub <- c(sample(1:max(which(S$yesno=="y")), round(0.8*max(which(S$yesno=="y")),digits=0)),
sample((max(which(S$yesno=="y"))+1):4601,round(0.8*length(which(S$yesno=="n")),digits=0)))
fit <- rpart(S$yesno~ ., data=S, subset=sub)
plot(fit)
text(fit)
table(predict(fit, S[-sub,], type="class"), S[-sub, "yesno"])
S<-spam7
sub <- c(sample(1:max(which(S$yesno=="y")), round(0.8*max(which(S$yesno=="y")),digits=0)),
sample((max(which(S$yesno=="y"))+1):4601,round(0.8*length(which(S$yesno=="n")),digits=0)))
fit <- rpart(S$yesno~ ., data=S, subset=sub)
plot(fit)
text(fit)
table(predict(fit, S[-sub,], type="class"), S[-sub, "yesno"])
S<-spam7
sub <- c(sample(1:max(which(S$yesno=="y")), round(0.8*max(which(S$yesno=="y")),digits=0)),
sample((max(which(S$yesno=="y"))+1):4601,round(0.8*length(which(S$yesno=="n")),digits=0)))
fit <- rpart(S$yesno~ ., data=S, subset=sub)
plot(fit)
text(fit)
table(predict(fit, S[-sub,], type="class"), S[-sub, "yesno"])
S<-spam7
sub <- c(sample(1:max(which(S$yesno=="y")), round(0.8*max(which(S$yesno=="y")),digits=0)),
sample((max(which(S$yesno=="y"))+1):4601,round(0.8*length(which(S$yesno=="n")),digits=0)))
fit <- rpart(S$yesno~ ., data=S, subset=sub)
fit
plot(fit)
text(fit)
S<-spam7
sub <- c(sample(1:max(which(S$yesno=="y")), round(0.8*max(which(S$yesno=="y")),digits=0)),
sample((max(which(S$yesno=="y"))+1):4601,round(0.8*length(which(S$yesno=="n")),digits=0)))
fit <- rpart(S$yesno~ ., data=S, subset=sub)
fit
plot(fit)
text(fit)
table(predict(fit, S[-sub,], type="class"), S[-sub, "yesno"])
predict(fit, S[-sub,], type="class"), S[-sub, "yesno"]
(24+110)/(534+253)
(24+110)/(921)
(55+72)/(921)
S<-spam7
sub <- c(sample(1:max(which(S$yesno=="y")), round(0.8*max(which(S$yesno=="y")),digits=0)),
sample((max(which(S$yesno=="y"))+1):4601,round(0.8*length(which(S$yesno=="n")),digits=0)))
fit <- rpart(S$yesno~ ., data=S, subset=sub)
fit
plot(fit)
text(fit)
table(predict(fit, S[-sub,], type="class"), S[-sub, "yesno"])
(145)/(921)
################ TP A RENDRE POUR LE 18 JANVIER 2021 ##########################
###############################################################################
# Ce fichier présente le code source permettant l'analyse du dataset d'étude
# Binôme : Franck Saoude et Elisabeth Bourgeois
################################################################################
# DEBUT
################################################################################
#
# Etape 1 : PREPARATION DES DONNEES
getwd()
setwd("/home/liz/Documents/MS_Big_Data_TP_et_projets/Data Mining/Projet/Parkinson_R")
A_init<-read.table("parkinsons.data_headerless")
# voir si read.csv peut convenir
dim(A_init)
label<-attributes(A_init)$row.names
# librairie pour permettre le changement des col
library(dplyr, quietly = TRUE)
A_full <- A_init %>% rename( SignalId= V1, MDVP_Fo = V2 , MDVP_Fhi = V3, MDVP_Flow = V4,
MDVP_JitterRel = V5, MDVP_JitterAbs =V6, MDVP_Rap=V7,
MDVP_PPQ = V8, Jitter_DDP = V9, MDVP_Shimmer = V10,
MDVP_ShimmerDB = V11, Shimmer_APQ3 = V12,
Shimmer_APQ5 = V13, MDVP_APQ = V14, Shimmer_DDA = V15,
NHR = V16, HNR = V17, status = V18, RPDE = V19, DFA = V20,
spread1 = V21, spread2 = V22, D2 = V23, PPE = V24
)
# verification du changement de nom des colonnes
names(A_full)
# Statistiques descriptives
#
# Min, max, moy, mediane, 1er et 3ème quartiles,  des 23 paramètres quantitatifs
# étudiés
summary(A_full)
# stats compkémentaires
# infos sur le nb d'observations, sur l'existence de val manquantes,
# et autres quantiles
library(Hmisc)
describe(A_full)
describe(A_full)
#Tracé de la fonction du courde
#source("/home/liz/Documents/MS Big Data/Data Mining/TP3-Classification/fct_coude.R")
{
Tab<- NULL
for(k in 1:10){
Res<-kmeans(A_full,k)
Tab[k]= Res$tot.withinss/Res$totss
}
plot(Tab, typ='l')
}
################ TP A RENDRE POUR LE 18 JANVIER 2021 ##########################
###############################################################################
# Ce fichier présente le code source permettant l'analyse du dataset d'étude
# Binôme : Franck Saoude et Elisabeth Bourgeois
################################################################################
# DEBUT
################################################################################
#
# Etape 1 : PREPARATION DES DONNEES
getwd()
setwd("/home/liz/Documents/MS_Big_Data_TP_et_projets/Data Mining/Projet/Parkinson_R")
A_init<-read.table("parkinsons.data_headerless")
# voir si read.csv peut convenir
dim(A_init)
label<-attributes(A_init)$row.names
# librairie pour permettre le changement des col
library(dplyr, quietly = TRUE)
A_full <- A_init %>% rename( SignalId= V1, MDVP_Fo = V2 , MDVP_Fhi = V3, MDVP_Flow = V4,
MDVP_JitterRel = V5, MDVP_JitterAbs =V6, MDVP_Rap=V7,
MDVP_PPQ = V8, Jitter_DDP = V9, MDVP_Shimmer = V10,
MDVP_ShimmerDB = V11, Shimmer_APQ3 = V12,
Shimmer_APQ5 = V13, MDVP_APQ = V14, Shimmer_DDA = V15,
NHR = V16, HNR = V17, status = V18, RPDE = V19, DFA = V20,
spread1 = V21, spread2 = V22, D2 = V23, PPE = V24
)
# verification du changement de nom des colonnes
names(A_full)
#Tracé de la fonction du courde
#source("/home/liz/Documents/MS Big Data/Data Mining/TP3-Classification/fct_coude.R")
{
Tab<- NULL
for(k in 1:10){
Res<-kmeans(A_full,k)
Tab[k]= Res$tot.withinss/Res$totss
}
plot(Tab, typ='l')
}
Resk2<-kmeans(A_full,2)
library(tidyverse)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(tidymodels)
install.packages("tidymodels")
install.packages("tidymodels")
library(tidymodels)
tidymodels_prefer()
library(tidymodels)
library(tidyverse)
Resk2<-kmeans(A_full,2)
install.packages("tidyverse")
library(tidyverse)
devtools::install_github("tidyverse/tidyverse")
install.packages("tibble")
install.packages("tibble")
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
install.packages("libxml2-dev")
??pkg-config
install.packages("tidyverse")
library(tidyverse)
install.packages("openssl")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("libxml2-dev")
library(tidyverse)
install.packages("tidyverse")
install.packages("openssl")
install.packages("tidyverse")
install.packages("libxml2-dev")
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
tidyverse_prefer()
edit_r_profile()
library(conflicted)
conflict_prefer("filter", "dplyr")
conflict_prefer("select", "dplyr")
Resk2<-kmeans(A_full,2)
#PARTIE 1
data("USArrests")
X<-USArrests
Resk2<-kmeans(X,2)
Resk2
# verification du changement de nom des colonnes
names(A_full)
Resk2<-kmeans(A_full,2)
Bk<-kmeans(A_full,2)
apply(A_full,function(x) which(is.na(x)))
lapply(A_full,function(x) which(is.na(x)))
all(!is.na(A_full))
# Statistiques descriptives
#
# Min, max, moy, mediane, 1er et 3ème quartiles,  des 23 paramètres quantitatifs
# étudiés
summary(A_full)
all(!is.na(A_full))
lapply(donnees,function(x) which(is.na(x)))
lapply(A_full,function(x) which(is.na(x)))
B_full<-A_full[-1]
B_full
all(!is.na(B_full))
lapply(B_full,function(x) which(is.na(x)))
Bk<-kmeans(B_full,2)
view(Bk)
Bk
Tab<- NULL
for(k in 1:10){
Res<-kmeans(B_full,k)
Tab[k]= Res$tot.withinss/Res$totss
}
plot(Tab, typ='l')
